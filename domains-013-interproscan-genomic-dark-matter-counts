#! python

# 5-interproscan5-app-id-annotations-PVul              7-species-summary-tool-annotation-counts-species  GAeg.pep.tsv  PMax.pep.tsv
# 5-interproscan5-app-id-annotations-CGig  5-interproscan5-app-id-annotations-MTro  6-list-interproscan-parsed 

input_data_files = open( 'output/6-list-interproscan-parsed', 'r' )
output_stats = open( 'output/13-dark-matter-stats', 'w' )
output_darkmatter = open( 'output/13-dark-matter-seqids', 'w' )

GSpp_tool_light = {}
GSpp_tool_dark = {}

for data_file in input_data_files:
	input_data = open( data_file[ :-1 ], 'r' )
	GSpp = data_file[ :-1 ].split( '-' )[ -1 ]
	GSpp_tool_light[ GSpp ] = {}
	GSpp_tool_light[ GSpp ][ 'GO' ] = []
	GSpp_tool_light[ GSpp ][ 'Pfam' ] = []
	GSpp_tool_light[ GSpp ][ 'PANTHER' ] = []
	
	GSpp_tool_dark[ GSpp ] = {}
	GSpp_tool_dark[ GSpp ][ 'GO' ] = []
	GSpp_tool_dark[ GSpp ][ 'Pfam' ] = []
	GSpp_tool_dark[ GSpp ][ 'PANTHER' ] = []
	GSpp_tool_dark[ GSpp ][ 'None' ] = []
	
	# Aplysia_californica__LOC101850917__XP_012946862.1       PANTHER_PTHR13402_2012_2274     Pfam_PF12932_1265_1362, Pfam_PF12931_1439_1677  GO:0048208_2012_2274, GO:0006914_2012_2274
	# Aplysia_californica__LOC101851377__XP_005088848.2       None    None    None

	for data in input_data:
		if data[ 0 ] == '[':
			continue
		info = data.strip().split( '\t' )
		seqid = info[ 0 ]
		go = info[ 2 ]
		pfam = info[ 2 ]
		panther = info[ 1 ]

		name_gspp = seqid.split( '__' )[ 0 ]
		genus = name_gspp.split( '_' )[ 0 ]
		species = name_gspp.split( '_' )[ 1 ]
		GSPP_sequence = genus[ 0 ] + species[ 0 ].upper() + species[1:3 ]

		if go != 'None':
			GSpp_tool_light[ GSpp ][ 'GO' ].append( seqid )
		else:
			GSpp_tool_dark[ GSpp ][ 'GO' ].append( seqid )

		if pfam != 'None':
			GSpp_tool_light[ GSpp ][ 'Pfam' ].append( seqid )
		else:
			GSpp_tool_dark[ GSpp ][ 'Pfam' ].append( seqid )

		if panther != 'None':
			GSpp_tool_light[ GSpp ][ 'PANTHER' ].append( seqid )
		else:
			GSpp_tool_dark[ GSpp ][ 'PANTHER' ].append( seqid )

		if go == 'None' and pfam == 'None' and panther == 'None':
			GSpp_tool_dark[ GSpp ][ 'None' ].append( seqid )

	input_data.close()

output_stats.write(  'GSpp' + '\t' + 'GO_light' + '\t' + 'PFAM_light' + '\t' + 'PANTHER_light' + '\t' + 'GO_dark' + '\t'  + 'PFAM_dark' + '\t' + 'PANTHER_dark' + '\t' + 'DARK_matter' + '\n' )

for GSpp in sorted(GSpp_tool_light.keys() ):
	go_light = str( len( GSpp_tool_light[ GSpp ] [ 'GO' ] ) )
	pfam_light = str( len( GSpp_tool_light[ GSpp ] [ 'Pfam' ] ) )
	panther_light = str( len( GSpp_tool_light[ GSpp ] [ 'PANTHER' ] ) )
	go_dark = str( len( GSpp_tool_dark[ GSpp ] [ 'GO' ] ) )
	pfam_dark = str( len( GSpp_tool_dark[ GSpp ] [ 'Pfam' ] ) )
	panther_dark = str( len( GSpp_tool_dark[ GSpp ] [ 'PANTHER' ] ) )
	dark_matter = str( len( GSpp_tool_dark[ GSpp ] [ 'None' ] ) )
	
	output_stats.write(  GSpp + '\t' + go_light + '\t' + pfam_light + '\t' + panther_light + '\t' + go_dark + '\t'  + pfam_dark + '\t' + panther_dark + '\t' + dark_matter + '\n' )

	for seqid in GSpp_tool_dark[ GSpp ] [ 'None' ]:
		output_darkmatter.write( GSpp + '\t' + seqid + '\n' )
	
input_data_files.close()
output_stats.close()
output_darkmatter.close()
